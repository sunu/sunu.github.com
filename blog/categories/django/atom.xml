<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | tarashish dot com]]></title>
  <link href="http://sunu.github.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://sunu.github.com/"/>
  <updated>2014-03-29T23:05:50+05:30</updated>
  <id>http://sunu.github.com/</id>
  <author>
    <name><![CDATA[Tarashish Mishra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Protect your secrets!]]></title>
    <link href="http://sunu.github.com/blog/2014/03/29/protect-your-secret/"/>
    <updated>2014-03-29T17:52:00+05:30</updated>
    <id>http://sunu.github.com/blog/2014/03/29/protect-your-secret</id>
    <content type="html"><![CDATA[<p>Django has a SECRET_KEY settings among many others. This SECRET_KEY is really important for security purposes as it is used for cryptographic signing functionality in Django (<a href="https://docs.djangoproject.com/en/dev/topics/signing/">More</a> about cryptographic signing). We are expected to keep the value secret. Running Django with a known SECRET_KEY defeats many of Djangoâ€™s security protections, and can lead to privilege escalation and remote code execution vulnerabilities.</p>

<p>So putting the SECRET_KEY setting of Django in version control and putting the code out on a public repository on Github or Bitbucket is not really a good idea and should be avoided. Same can be said for other secret keys like API keys for different services, OAuth tokens, passwords for your database. They are all supposed to be, you know, "secret"!</p>

<p><img src="http://i.imgur.com/G0qc8Lr.gif" alt="Secret" /></p>

<!--more-->


<p>As a solution to this problem, most people edit this configurations on the production machine. Unfortunately, it is not a good idea. Editing source files on production is often troublesome. Also, while editing these keys in your development setup, you may just commit and push them accidentally to the public repository. So this practice is somewhat troublesome and dangerous.</p>

<h2>Environment variables to the rescue</h2>

<p>Environment variables are the answer to our problem. Using environment variables to store our secret keys gives us a ton of benefits.</p>

<ul>
<li>We can now put all our settings files in version control without hesitation.</li>
<li>No need to edit source files on production.</li>
<li>No risk of accidentally committing secret keys.</li>
</ul>


<p><img src="http://i.imgur.com/EuEKhSr.gif" alt="Yay!" /></p>

<h2>How to set environment variables</h2>

<p>Environment variables can be set easily using bash commands. For example:
<code>bash
$ export MY_SECRET_KEY=SuP3r-S3Kr31-K3y
</code>
We can put this line at the end of our <code>.bashrc</code> or <code>.bash_profile</code> files. Another way to do this for individual projects is to put this line at the end of <code>bin/activate</code> script of the virtualenv.</p>

<p>Most platform-as-a-service platforms also provide ways to set environment variables easily. For example, on Heroku you can set environment variables like this.
<code>bash
$ cd myapp
$ heroku config:set SECRET_KEY=mySuP3rS3cr31K3yRul3s
</code>
Here is the <a href="https://devcenter.heroku.com/articles/config-vars">documentation</a> from Heroku.</p>

<p>These environment variables can be easily accessed in the settings file to set the secret key by doing something like:
<code>python
import os
SOME_SECRET_KEY = os.environ["SOME_SECRET_KEY"]
</code></p>

<p>And that's the way to do it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porting Oppia to django]]></title>
    <link href="http://sunu.github.com/blog/2013/04/27/porting-oppia-to-django/"/>
    <updated>2013-04-27T23:48:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/04/27/porting-oppia-to-django</id>
    <content type="html"><![CDATA[<p>For those who are wondering what oppia is,
<blockquote><p>Oppia is a web-based tool for creating interactive online activities that enable students to learn by doing. Oppia aims to capture and generalize the one-on-one "conversations" that a student has with a teacher, so that other students can benefit from them.</p></blockquote></p>

<p>Currently, oppia is written using webapp2 and runs on Google App Engine only. The goal is to port it to django, so that it can run on more number of platforms and hopefully be used for training missions at <a href="http://openhatch.org">openhatch</a></p>

<!--more-->


<p>I first heard of oppia on <a href="http://openhatch.org">openhatch</a>. People behind openhatch were (and still are) interested in having the training missions ported to oppia. And I was very much interested in contributing to openhatch. After all openhatch is fantastic. It provides a great platform for opensource newbies (people like me) to learn new skills and solve their first bug and conducts workshops on various campuses, which is pretty amazing. And people behind openhatch are just super friendly and awesome. (tip: if you're planning to make your first opensource contribution <a href="http://openhatch.org">openhatch</a> and #openhatch on freenode is probably the best place to start).</p>

<p>So, I showed my interest in porting oppia on #openhatch and <a href="https://twitter.com/asheeshlaroia">Asheesh</a> put me in contact with Sean, the author of oppia. I talked to Sean on Google+ and we are now working on porting oppia to django. We have started by doing some experiments to test the feasibility of the porting. For now, everything looks good. Hopefully, we'll be able to port oppia entirely to django-nonrel soon :-)</p>
]]></content>
  </entry>
  
</feed>
