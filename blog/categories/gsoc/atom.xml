<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GSoC | tarashish dot com]]></title>
  <link href="http://sunu.github.com/blog/categories/gsoc/atom.xml" rel="self"/>
  <link href="http://sunu.github.com/"/>
  <updated>2013-07-24T19:41:35+05:30</updated>
  <id>http://sunu.github.com/</id>
  <author>
    <name><![CDATA[Tarashish Mishra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC Update: July 24 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/07/24/gsoc-update-july-24-2013/"/>
    <updated>2013-07-24T19:27:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/07/24/gsoc-update-july-24-2013</id>
    <content type="html"><![CDATA[<p>After working on the django models for Oppia we finally have a running heroku app at <a href="http://oh-oppia.herokuapp.com">oh-oppia.herokuapp.com</a>. I have also worked on a way to combine the oppia WSGI app and Openhatch WSGI app using Werzeug's <a href="http://werkzeug.pocoo.org/docs/middlewares/#werkzeug.wsgi.DispatcherMiddleware">DispatcherMiddleware</a>. I have also worked on the auth system, so that I can pull out the session from webapp2 request object and passing into django middlewares to get the authenticated user out of it.</p>

<p>The next thing I will be working on is the routing, which is currently broken after combining both WSGI apps. Also I'll be trying to push all my changes to Oppia mainline.</p>

<p>That's all for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC update: July 11 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/07/11/gsoc-update-july-11-2013/"/>
    <updated>2013-07-11T10:11:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/07/11/gsoc-update-july-11-2013</id>
    <content type="html"><![CDATA[<p>Last week we made some significant changes to the way models are structured in Oppia. They are now divided into 3 files named models.py, services.py, domain.py. While models.py holds the platform dependent model code, the other 2 are completely independent of the platform. Hence we are now in a position to use GAE datastore models directly without using django-nonrel.</p>

<p>Other than that, I mostly worked on merging changes from upstream and fixing the merged code. I have also implemented a to_dict method which represents a model as a dictionary. Statistics model is somewhat ported for now. It still has some failing tests.</p>

<p>That's it for now.</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Update: June 29 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/06/29/gsoc-update-june-29-2013/"/>
    <updated>2013-06-29T22:39:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/06/29/gsoc-update-june-29-2013</id>
    <content type="html"><![CDATA[<p>Last week I mostly worked on porting the models. Oppia uses LocalStructuredProperty available by GAE datastore a lot to store model instances locally inside other models. We are using a customized version of <a href="https://github.com/derek-schaefer/django-json-field/">django-json-field</a> to implement that in Django by overriding the methods which sets and gets the values from from the database inside JSONField. Basically we are converting the objects to a JSON string before storing in the database and then retrieving the object from that JSON string while fetching it again from the database.</p>

<p>Next week, I'll merge the upstream changes. Some changes in exploration and state model has been done to simplify things. Ancestor Queries have been removed. So I'll try to implement those changes in the Django models. Also I will add some serialization code which is needed to represent models as nested dictionaries.</p>

<p>That's it for now.</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Update: June 16 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/06/15/gsoc-update-june-14-2013/"/>
    <updated>2013-06-15T00:32:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/06/15/gsoc-update-june-14-2013</id>
    <content type="html"><![CDATA[<p>It's 3rd week of GSoC already. So time for an short update.</p>

<p>I have worked on a detailed plan of the summer with Sean. The plan is on an etherpad <a href="https://etherpad.mozilla.org/iegTQD1NMS">here</a>. And now I have started to work on the plan. The coding period begins on 17st June, but I have started early. Hopefully it will be helpful and will get me some more time to finish the project in time.</p>

<p>The plan for now only contains the first part of the project i.e. porting Oppia to Django. After we finish this part, we'll have a clear idea how to implement the missions for OpenHatch.</p>

<p>That's it for now.</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yay! I am in]]></title>
    <link href="http://sunu.github.com/blog/2013/06/01/yay-i-am-in/"/>
    <updated>2013-06-01T20:28:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/06/01/yay-i-am-in</id>
    <content type="html"><![CDATA[<p>Bit of a late news, but yes, I'm accepted as a student for Google Summer of Code(GSoC) 2013. I'll be working with OpenHatch this summer under Python Software Foundation(PSF)'s umbrella. More details on my accepted project proposal can be found on <a href="http://www.google-melange.com/gsoc/project/google/gsoc2013/sunu/19001">melange</a>.</p>

<p>I also applied for and got accepted by MoinMoin, but we all discussed about it and decided that it will be better if I do GSoC with OpenHatch. I haven't started working on the project yet as semesters are still going on. But I'm pretty excited and I'll start with the project as soon as exams are over.</p>

<p>I plan to blog about things I do during GSoC here, so that I can document my progress and difficulties. And also it'll be a great read someday in the future.</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
</feed>
