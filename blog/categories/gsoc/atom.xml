<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GSoC | tarashish dot com]]></title>
  <link href="http://sunu.github.com/blog/categories/gsoc/atom.xml" rel="self"/>
  <link href="http://sunu.github.com/"/>
  <updated>2014-03-29T23:05:50+05:30</updated>
  <id>http://sunu.github.com/</id>
  <author>
    <name><![CDATA[Tarashish Mishra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC Update: September 2 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/09/02/gsoc-update-september-2-2013/"/>
    <updated>2013-09-02T19:19:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/09/02/gsoc-update-september-2-2013</id>
    <content type="html"><![CDATA[<p>There have been major changes in the plan in my project since the last update. We have decided to host the explorations on Google AppEngine for now. And we'll have a OpenHatch api for mission specific stuff that can't be done on GAE. Our Oppia will talk to that api to perform those special parts.</p>

<p>I have implemented a minimal version of the tar mission on AppEngine. Oppia didn't have a widget for file upload, so I made one. But it's more of a fire reading widget because technically we are uploading the file but not storing it in the datastore. The current version of mission can be seen <a href="http://oh-oppia-test.appspot.com/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Update: August 14 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/08/13/gsoc-update-august-14-2013/"/>
    <updated>2013-08-13T23:58:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/08/13/gsoc-update-august-14-2013</id>
    <content type="html"><![CDATA[<p>Last week we decided to use Oppia's existing skin for now in the Openhatch missions. Also each step of a mission will be a separate exploration. So we need a wrapper around Oppia which will allow us to manage the prerequisites and codependency of steps in a mission.</p>

<p>I have pushed the code I worked on to Oppia's main repository. Last week I worked on routing configurations which will allow us to use uri_for in place of raw addresses in the templates. Other than that I am mostly done with adding an automated test suite for non-GAE platforms.</p>

<p>I plan to replace all the raw addresses in the templates with uri_for next week. After that I have to work on the wrapper that will manage the codependency of steps in a mission.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Update: August 4 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/08/04/gsoc-update-august-4-2013/"/>
    <updated>2013-08-04T03:33:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/08/04/gsoc-update-august-4-2013</id>
    <content type="html"><![CDATA[<p>Welcome to another GSoC update. This is the first after midterm. So I am officially in the second half of GSoC now. And the results of mid-term evaluation are out already. I have passed. Many thanks to Asheesh, my mentor and all the nice people from Openhatch, PSF and Google.</p>

<p>So now let's talk about what I have accomplished since the last update. I have mostly worked on getting my code into Oppia repository. So I have merged and changed the code structure for that. Also we have a new method to switch models on different platforms now. We decided to drop the previous approach as it was not very reliable. Also we have devised a plan to solve the routing problem. I work one that in the next couple of days.</p>

<p>That's it for now.</p>

<p>Ciao.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Update: July 24 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/07/24/gsoc-update-july-24-2013/"/>
    <updated>2013-07-24T19:27:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/07/24/gsoc-update-july-24-2013</id>
    <content type="html"><![CDATA[<p>After working on the django models for Oppia we finally have a running heroku app at <a href="http://oh-oppia.herokuapp.com">oh-oppia.herokuapp.com</a>. I have also worked on a way to combine the oppia WSGI app and Openhatch WSGI app using Werzeug's <a href="http://werkzeug.pocoo.org/docs/middlewares/#werkzeug.wsgi.DispatcherMiddleware">DispatcherMiddleware</a>. I have also worked on the auth system, so that I can pull out the session from webapp2 request object and passing into django middlewares to get the authenticated user out of it.</p>

<p>The next thing I will be working on is the routing, which is currently broken after combining both WSGI apps. Also I'll be trying to push all my changes to Oppia mainline.</p>

<p>That's all for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC update: July 11 2013]]></title>
    <link href="http://sunu.github.com/blog/2013/07/11/gsoc-update-july-11-2013/"/>
    <updated>2013-07-11T10:11:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/07/11/gsoc-update-july-11-2013</id>
    <content type="html"><![CDATA[<p>Last week we made some significant changes to the way models are structured in Oppia. They are now divided into 3 files named models.py, services.py, domain.py. While models.py holds the platform dependent model code, the other 2 are completely independent of the platform. Hence we are now in a position to use GAE datastore models directly without using django-nonrel.</p>

<p>Other than that, I mostly worked on merging changes from upstream and fixing the merged code. I have also implemented a to_dict method which represents a model as a dictionary. Statistics model is somewhat ported for now. It still has some failing tests.</p>

<p>That's it for now.</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
</feed>
