<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tarashish dot com]]></title>
  <link href="http://sunu.github.com/atom.xml" rel="self"/>
  <link href="http://sunu.github.com/"/>
  <updated>2013-04-28T01:09:14+05:30</updated>
  <id>http://sunu.github.com/</id>
  <author>
    <name><![CDATA[Tarashish Mishra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Porting Oppia to django]]></title>
    <link href="http://sunu.github.com/blog/2013/04/27/porting-oppia-to-django/"/>
    <updated>2013-04-27T23:48:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/04/27/porting-oppia-to-django</id>
    <content type="html"><![CDATA[<p>For those who are wondering what oppia is,</p>

<blockquote><p>Oppia is a web-based tool for creating interactive online activities that enable students to learn by doing. Oppia aims to capture and generalize the one-on-one &#8220;conversations&#8221; that a student has with a teacher, so that other students can benefit from them.</p></blockquote>


<p>Currently, oppia is written using webapp2 and runs on Google App Engine only. The goal is to port it to django, so that it can run on more number of platforms and hopefully be used for training missions at <a href="http://openhatch.org">openhatch</a></p>

<!--more-->


<p>I first heard of oppia on <a href="http://openhatch.org">openhatch</a>. People behind openhatch were (and still are) interested in having the training missions ported to oppia. And I was very much interested in contributing to openhatch. After all openhatch is fantastic. It provides a great platform for opensource newbies (people like me) to learn new skills and solve their first bug and conducts workshops on various campuses, which is pretty amazing. And people behind openhatch are just super friendly and awesome. (tip: if you&#8217;re planning to make your first opensource contribution <a href="http://openhatch.org">openhatch</a> and #openhatch on freenode is probably the best place to start).</p>

<p>So, I showed my interest in porting oppia on #openhatch and <a href="https://twitter.com/asheeshlaroia">Asheesh</a> put me in contact with Sean, the author of oppia. I talked to Sean on Google+ and we are now working on porting oppia to django. We have started by doing some experiments to test the feasibility of the porting. For now, everything looks good. Hopefully, we&#8217;ll be able to port oppia entirely to django-nonrel soon :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSOC 2013 is On]]></title>
    <link href="http://sunu.github.com/blog/2013/04/11/gsoc-2013-is-on/"/>
    <updated>2013-04-11T23:13:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/04/11/gsoc-2013-is-on</id>
    <content type="html"><![CDATA[<p>Google Summer of Code is happening this year too, thanks to Google. For those who don&#8217;t know what Google Summer of Code (GSOC) is:</p>

<blockquote><p>Google Summer of Code is a global program that offers students stipends to write code for open source projects. We have worked with the open source community to identify and fund exciting projects for the upcoming summer.</p></blockquote>


<p>Google has already announced the list of accepted organizations. You can find the list <a href="http://www.google-melange.com/gsoc/accepted_orgs/google/gsoc2013">here</a>. There are a total of 177 organizations participating this year including the biggies like Mozilla, Apache, KDE, GNOME, PSF, Fedora etc.</p>

<p>I&#8217;m applying as a student to be part of GSOC this summer. Wish me luck :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing 'mkmf' load error in Ubuntu]]></title>
    <link href="http://sunu.github.com/blog/2013/02/02/fixing-mkmf-load-error-ubuntu/"/>
    <updated>2013-02-02T20:58:00+05:30</updated>
    <id>http://sunu.github.com/blog/2013/02/02/fixing-mkmf-load-error-ubuntu</id>
    <content type="html"><![CDATA[<p>After a while I sat down to set up my Ruby environment on my new ubuntu laptop for octopress. I haven&#8217;t blogged for a few months. And I haven&#8217;t really needed ruby in a few months either. So for octopress I had to set up rvm, rake and all the ruby gems. But while installing RedCloth gem (RedCloth gem is needed for markup processing in Octopress) I encountered this error.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Fetching gem metadata from http://rubygems.org/.......
</span><span class='line'>Fetching gem metadata from http://rubygems.org/..
</span><span class='line'>Using rake (0.9.2.2) 
</span><span class='line'>Installing RedCloth (4.2.9) with native extensions 
</span><span class='line'>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
</span><span class='line'>
</span><span class='line'>        /usr/bin/ruby1.9.1 extconf.rb 
</span><span class='line'>/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf (LoadError)
</span><span class='line'>  from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
</span><span class='line'>  from extconf.rb:1:in `&lt;main>'
</span><span class='line'>
</span><span class='line'>Gem files will remain installed in /var/lib/gems/1.9.1/gems/RedCloth-4.2.9 for inspection.
</span><span class='line'>Results logged to /var/lib/gems/1.9.1/gems/RedCloth-4.2.9/ext/redcloth_scan/gem_make.out
</span><span class='line'>An error occurred while installing RedCloth (4.2.9), and Bundler cannot continue.
</span><span class='line'>Make sure that `gem install RedCloth -v '4.2.9'` succeeds before bundling.</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>So it could not find &#8216;mkmf&#8217;. I searched a bit about the error. Turns out the fix is fairly easy. I just had to install the development version of ruby 1.9.1.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install ruby1.9.1-dev</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. Now I am blogging away :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First step into the Open Source world]]></title>
    <link href="http://sunu.github.com/blog/2012/09/30/first-step-into-the-open-source-world/"/>
    <updated>2012-09-30T15:36:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/09/30/first-step-into-the-open-source-world</id>
    <content type="html"><![CDATA[<p>I have been wanting to contribute open source projects for quite some time. Contributing to existing open source projects is quite different from working on small projects of your own. I think the main problem I faced was the size of the repositories. The amount of code already there was always overwhelming. So I never went too far.</p>

<p>But now I have some good news to share. I have finally become a part (however small that is) of the open source movement. I have started contributing to <a href="http://moinmo.in/">MoinMoin</a>. As mentioned in their bitbucket <a href="https://bitbucket.org/thomaswaldmann/moin-2.0">repository</a></p>

<blockquote><p>MoinMoin is an easy to use, full-featured and extensible wiki software package written in Python. It can fulfill a wide range of roles, such as a personal notes organizer deployed on a laptop or home web server, a company knowledge base deployed on an intranet, or an Internet server open to individuals sharing the same interests, goals or projects.</p></blockquote>


<!--more-->


<p>At the time of writing this I have  got 3 pull requests accepted and resolved an <a href="https://bitbucket.org/thomaswaldmann/moin-2.0/issue/263/create-a-setup-less-moin-using-stuff-from">issue</a>. I mainly worked on creating a setup-less moin for both the standalone server and Google App Engine.</p>

<p>And this, I would say is my first step into the open source world :). All thanks to the help of <a href="http://twitter.com/thomasjwaldmann">Thomas Waldmann</a> in the irc channel. For all people wanting to get started with open source , just hang out in the irc of a project of your interest and there are always lovely people like Thomas who will help you out :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Antialiasing Bug in Chrome]]></title>
    <link href="http://sunu.github.com/blog/2012/09/12/solving-antialiasing-bug-in-chrome/"/>
    <updated>2012-09-12T18:27:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/09/12/solving-antialiasing-bug-in-chrome</id>
    <content type="html"><![CDATA[<p>Yesterday while making a small cute sticky note chrome extension, I faced an antialiasing bug in chrome. The bug nearly drove me out of my mind :)</p>

<p>So to save some headaches in future, I am writing down the possible solution here, so that me or anyone else who faces this issue in future will hopefully find this post and the solution will hopefully work. Another thing I&#8217;m hopeful about is that the future release, chrome will kick this issue out for good. :D</p>

<p>So first up, here&#8217;s a snapshot of the issue.
<img src="http://sunu.github.com/images/bug.png" alt="chrome bug" /></p>

<!--more-->


<p></p>

<p>As you can see there are weird horizontal traces all over the place while I try to drag a draggable div which uses jquery UI.</p>

<p>Now the solution that worked for me. Drum roll please.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">outline</span><span class="o">:</span> <span class="nt">1px</span> <span class="nt">solid</span> <span class="nt">transparent</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it.</p>

<p>If it does not solve your issue, then your issue may be different than mine. So good luck for your solution hunt. A hint: google and stackoverflow.com are your best bait for a solution. They helped me with my solution too :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Sublime Text 2 on Ubuntu 12.04]]></title>
    <link href="http://sunu.github.com/blog/2012/08/21/installing-sublime-text-2-on-ubuntu-12-dot-04/"/>
    <updated>2012-08-21T23:32:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/21/installing-sublime-text-2-on-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p><strong><strong>Update:  </strong></strong> Installing through ppa is much cleaner and easier. Just follow the <a href="http://www.webupd8.org/2011/03/sublime-text-2-ubuntu-ppa.html">instructions</a></p>

<p><a href="http://www.sublimetext.com/">Sublime Text 2</a> is the most awesome text editor I have used so far (even better than Textmate I think). If you have never heard of it you should surely check it out .</p>

<p>This post is to guide people (that include myself) how to install and integrate sublime text 2 with unity user interface of ubuntu 12.04. While there are installers of sublime text available for windows and OS X , ubuntu does not have one. So some tweaks are needed to integrate sublime text into unity.</p>

<p><strong><strong>Step 1 - </strong></strong>
Download the tar archive from sublime text&#8217;s <a href="http://www.sublimetext.com/2">download section</a>. Extract the file using the GUI archive manager or the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar xf Sublime\ Text\ 2\ Build\ 2181\ x64.tar.bz2</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p><strong><strong>Step 2 - </strong></strong>
After extraction you&#8217;ll get a &#8220;Sublime Text 2&#8221; folder. This folder contains all the stuff sublime text needs to run plus the sublime_text executable itself. So let&#8217;s move this folder to <code>/usr/lib</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv Sublime\ Text\ 2 /usr/lib/</span></code></pre></td></tr></table></div></figure>


<p><strong><strong>Step 3 - </strong></strong>
We need to call sublime text from the terminal. So let&#8217;s create a symbolic link in <code>/usr/bin</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s /usr/lib/Sublime\ Text\ 2/sublime_text /usr/bin/sublime</span></code></pre></td></tr></table></div></figure>


<p><strong><strong>Step 4 - </strong></strong>
Now let&#8217;s create a launcher to integrate sublime text into unity. First we create a <code>sublime.desktop</code> file in <code>/usr/share/applications</code> and open it in sublime text by</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo sublime /usr/share/applications/sublime.desktop</span></code></pre></td></tr></table></div></figure>


<p>Now paste the following chunk of code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Desktop Entry]
</span><span class='line'>Version=1.0
</span><span class='line'>Name=Sublime Text 2
</span><span class='line'># Only KDE 4 seems to use GenericName, so we reuse the KDE strings.
</span><span class='line'># From Ubuntu's language-pack-kde-XX-base packages, version 9.04-20090413.
</span><span class='line'>GenericName=Text Editor
</span><span class='line'> 
</span><span class='line'>
</span><span class='line'>Exec=sublime
</span><span class='line'>Terminal=false
</span><span class='line'>Icon=/usr/lib/Sublime Text 2/Icon/48x48/sublime_text.png
</span><span class='line'>Type=Application
</span><span class='line'>Categories=TextEditor;IDE;Development
</span><span class='line'>X-Ayatana-Desktop-Shortcuts=NewWindow
</span><span class='line'>
</span><span class='line'> 
</span><span class='line'>
</span><span class='line'>[NewWindow Shortcut Group]
</span><span class='line'>Name=New Window
</span><span class='line'>Exec=sublime -n
</span><span class='line'>TargetEnvironment=Unity</span></code></pre></td></tr></table></div></figure>


<p>Now it&#8217;s all ready. Lock the sublime text icon onto the launcher if you like and code like a boss :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Visit to Nandankanan]]></title>
    <link href="http://sunu.github.com/blog/2012/08/19/a-visit-to-nandankanan/"/>
    <updated>2012-08-19T21:42:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/19/a-visit-to-nandankanan</id>
    <content type="html"><![CDATA[<p>Recently I visited <a href="http://www.nandankanan.org/">Nandankanan</a>, a zoo near <a href="en.wikipedia.org/wiki/Bhubaneswar">Bhubaneswar</a> with friends :) . The zoo is mostly famous for the white tigers among other things. Mostly it was a memorable but somewhat disappointing outing.</p>

<p>The numbers of the animals on display was disappointing . We could see like 2 tigers , a lion-lioness pair , a zebra , a giraffe .There was no Orangutan , no bear . Most cages (or whatever I should call them) were empty. Disappointing . I was expecting more numbers of tigers at least. Anyway perhaps our timing was wrong or something. There was a chimpanzee. But I couldn&#8217;t see it because of some people yelling at it.(Yes. there WAS a BIG RED SIGN saying &#8220;SILENCE PLEASE&#8221; and those people seemed literate enough to read and understand it.) The chimp never got out of its hiding. That was the biggest disappointment of all. :( And yeah the zoo restaurant was closed too.</p>

<p>On the better side we saw a white tiger. The birds and reptile sections had a good variety of creatures. And above all I learned how to use my camera properly and had a great time with friends :). Here are some photographs we took.</p>

<p><img src="http://sunu.github.com/images/zoo5.jpg" alt="zoo pic 5" /></p>

<!--more-->


<p><img src="http://sunu.github.com/images/zoo1.jpg" alt="zoo pic 1" />
<img src="http://sunu.github.com/images/zoo2.jpg" alt="zoo pic 2" />
<img src="http://sunu.github.com/images/zoo3.jpg" alt="zoo pic 3" />
<img src="http://sunu.github.com/images/zoo4.jpg" alt="zoo pic 4" />
<img src="http://sunu.github.com/images/zoo6.jpg" alt="zoo pic 6" />
<img src="http://sunu.github.com/images/zoo7.jpg" alt="zoo pic 7" />
<img src="http://sunu.github.com/images/zoo8.jpg" alt="zoo pic 8" />
<img src="http://sunu.github.com/images/zoo9.jpg" alt="zoo pic 9" />
<img src="http://sunu.github.com/images/zoo10.jpg" alt="zoo pic 10" />
<img src="http://sunu.github.com/images/zoo11.jpg" alt="zoo pic 11" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scraping with Python]]></title>
    <link href="http://sunu.github.com/blog/2012/08/10/web-scraping-with-python/"/>
    <updated>2012-08-10T14:10:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/10/web-scraping-with-python</id>
    <content type="html"><![CDATA[<p>For those who have no idea what web scraping is</p>

<blockquote><p>Web scraping (also called web harvesting or web data extraction) is a computer software technique of extracting information from websites.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Web_scraping'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>The web is full of information. Generally we are happy enough to browse these information with our favorite web-browser. There are times, however, when we need to collect information from some site and manually browsing the site is not an option. Web scraping comes in handy in those situations. You build a program which access the information you need without opening the page in a web browser.<!--more--></p>

<p>Recently I got into such a situation. Results of first semester of my university were out. But there was no list of result of all the students of my college. You have to enter the registration no. of each student to get the result. So I decided to write a script to collect the result of all the students into a single list and dump it into a file.</p>

<p>The first step was to search for a good web scraping library for python. That was pretty easy. Google and StackOverflow gave me the answer in seconds. <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> was the way to go. I loved their tag line too. It was</p>

<blockquote><p>You didn&#8217;t write that awful page. You&#8217;re just trying to get some data out of it. Beautiful Soup is here to help.</p><footer><strong>BeautifulSoup</strong> <cite><a href='http://www.crummy.com/software/BeautifulSoup/'>www.crummy.com/software/&hellip;</a></cite></footer></blockquote>


<p>Installing BeautifulSoup was a breeze. All I had to do was</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo easy_install beautifulsoup4</span></code></pre></td></tr></table></div></figure>


<p>You could also install via <code>pip</code> by</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pip install beautifulsoup4</span></code></pre></td></tr></table></div></figure>


<p>or using aptitude package manager if you are using ubuntu or any other debian based distro.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-beautifulsoup4</span></code></pre></td></tr></table></div></figure>


<p>Then using urllib2 in combination with the wonderful BeautifulSoup library I could easily extract information from web pages.</p>

<p>To use BeautifulSoup for web scraping you first have to import urllib2 and BeautifulSoup itself.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'><span class="c"># for BeautifulSoup 3 it would be:</span>
</span><span class='line'><span class="c"># from BeautifulSoup import BeautifulSoup</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you just have to make the soup :D . Pass an html document into the BeautifulSoup constructor and you are ready to all sorts of things to it, extract whatever information list. To do that</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;url_of_the_page_you_want_to_parse.html&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># then do all sorts of things with soup here.</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all. For more information on what you can do with the soup object read the <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">documentation</a> of BeautifulSoup library .There is also a great video on web scraping from PyCon US 2012. I&#8217;m embedding it here</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/52wxGESwQSA" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Text Inputs Look Awesome Using CSS3]]></title>
    <link href="http://sunu.github.com/blog/2012/08/08/making-text-inputs-look-awesome-using-css3/"/>
    <updated>2012-08-08T04:54:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/08/making-text-inputs-look-awesome-using-css3</id>
    <content type="html"><![CDATA[<p>I often use this snippet of CSS to style text inputs and even search inputs. I just love the look of it. So this blog post is just to keep it within reach.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">input</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">5px</span> <span class="k">solid</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span>
</span><span class='line'>      <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">8px</span>  <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>            <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span>
</span><span class='line'>      <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">8px</span>  <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>            <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span>
</span><span class='line'>      <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">8px</span>  <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>            <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="o">,</span><span class="m">255</span><span class="o">,</span><span class="m">255</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">10px</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Note that if you use the above snippet the styling will be applied to all the inputs. To apply these styling to texty inputs only, we can do</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">input</span><span class="nd">:not</span><span class="o">([</span><span class="nt">type</span><span class="o">=</span><span class="nt">submit</span><span class="o">])</span><span class="nd">:not</span><span class="o">([</span><span class="nt">type</span><span class="o">=</span><span class="nt">file</span><span class="o">])</span> <span class="p">{</span>
</span><span class='line'>   <span class="c">/* all the awesome css here */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code snippet is from <a href="http://css-tricks.com/styling-texty-inputs-only/">CSS-TRICKS</a>. If you need to learn cool stuff in CSS do visit that site. <a href="http://twitter.com/chriscoyier">Chris Coyier</a> is fabulous.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweeting From Python.]]></title>
    <link href="http://sunu.github.com/blog/2012/08/07/tweeting-from-python/"/>
    <updated>2012-08-07T21:12:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/07/tweeting-from-python</id>
    <content type="html"><![CDATA[<p>Many times I have the urge to check twitter while at the terminal doing stuff I love (mostly python ). But I am too lazy to open up the browser and go to twitter.com . So I decided to see how can do all the tweeting stuff from the terminal itself using python. And it turned out to be fairly simple.</p>

<p>So first I needed a twitter library in python to keep things simple. So I googled around a bit and <a href="https://github.com/tweepy/tweepy">tweepy</a> seemed to be a very good choice. So I read the docs and fired up <a href="http://www.geany.org">Geany</a> to write some scripts.</p>

<p>First thing I learned reading all the docs is that Twitter uses something called OAuth to authenticate an application before it can access any user&#8217;s account. It is safer than the older simple authentication methods. Say some application X wants to tweet for you. The X has to log into your account to do so. In older authentication system the user used to provide his password to the application while authorizing it. But now the OAuth authentication system provides the application a access token through which it can access the user&#8217;s account after authentication. So it&#8217;s more secure.</p>

<!--more-->


<p>Next I headed to <a href="http://dev.twitter.com/apps/new">http://dev.twitter.com/apps/new</a> , created a new app and generated the access tokens . After noting down the consumer key , consumer secret key , access token and access token secret and all it was time to begin coding.</p>

<p>First I installed Tweepy by</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">easy_install</span> <span class="n">tweepy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you need to authenticate your application first using OAuth which is extremely easy in tweepy. All I needed to do was</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">tweepy</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">consumer_key</span><span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="c">#your consumer key</span>
</span><span class='line'><span class="n">consumer_secret</span><span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="c">#your consumer secret</span>
</span><span class='line'><span class="n">access_token</span><span class="o">=</span>   <span class="s">&quot;&quot;</span> <span class="c">#your acces token</span>
</span><span class='line'><span class="n">access_token_secret</span><span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="c">#your access token secret</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">OAuthHandler</span><span class="p">(</span><span class="n">consumer_key</span><span class="p">,</span> <span class="n">consumer_secret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span><span class="o">.</span><span class="n">set_access_token</span><span class="p">(</span><span class="n">access_token</span><span class="p">,</span> <span class="n">access_token_secret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that I had an authorized instance of the API object of tweepy I could use almost all the functionalities of the twitter api through this and that includes tweeting  , checking timeline , trends and mentions :)</p>

<p>To make a tweet you simply do</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">api</span><span class="o">.</span><span class="n">update_status</span><span class="p">(</span><span class="s">&quot;My awesome tweet which is more awesome than yours. ;)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will do it. Check if you don&#8217;t believe me. By the way while we are here let me tell you that &#8216;awesome&#8217; is one of the most overused English words. Some guy just told me that 2 or 3 days ago. :)</p>

<p>Next you may want to check all tweets in your timeline or DM a friend or search some stuff on twitter. You can do all that stuff and more using the api that tweepy provides. For the documentation check out the <a href="https://github.com/tweepy/tweepy/">Github Repo</a> and the <a href="http://code.google.com/p/tweepy/wiki/APIReference">API Reference</a>. And you&#8217;ll doing all the tweeting stuff from your terminal in minutes. Heck you can even update your profile picture from the terminal. Cool, No ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print is Not a Function in Python 2.x]]></title>
    <link href="http://sunu.github.com/blog/2012/08/06/print-is-not-a-function-in-python-2-dot-x/"/>
    <updated>2012-08-06T15:58:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/06/print-is-not-a-function-in-python-2-dot-x</id>
    <content type="html"><![CDATA[<blockquote><p>Everything in Python is an Object.</p></blockquote>


<p>This is perhaps the most common line in all the python books I have read. And indeed almost everything in python are objects. And this gives great powers to python.</p>

<p>For example, let&#8217;s say we have to pass a function as argument to another function. We don&#8217;t have to pass the function&#8217;s name as a parameter or anything. Because everything including functions are objects in python, we can directly pass the function as the argument. Take a look at the following example.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">blue</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="s">&#39;blue&#39;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">sky</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="s">&#39;sky&#39;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add_strings</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">a</span><span class="p">()</span> <span class="o">+</span> <span class="n">b</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">add_strings</span><span class="p">(</span><span class="n">blue</span><span class="p">,</span><span class="n">sky</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;bluesky&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Here we passed the functions <code>blue</code> and <code>sky</code> directly into the function <code>add_strings</code> as arguments. Thing to be noted is <code>blue</code> represents the function object , but <code>blue()</code> calls the function.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">blue</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="n">blue</span> <span class="n">at</span> <span class="mh">0x8c55064</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">blue</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;blue&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now similarly function objects can also be assigned to variables.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span> <span class="s">&quot;a&quot;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if we try the same thing with <code>print</code> in python 2.x</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="k">print</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="k">print</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get a SynaxError. This is simply because <code>print</code> is not a function in python 2.x , it is a statement. The systax of <code>print</code> makes it clear too. Notice that we don&#8217;t use parentheses in the print statement which are normally used in functions. But in python 3.x <code>print</code> is made a function according to <a href="http://www.python.org/dev/peps/pep-3105/">this PEP proposal</a> and the use of parenthesis in <code>print</code> in python 3.x also support the fact that print is a function in python 3.x. So the above assignment will work in python 3.x.</p>
]]></content>
  </entry>
  
</feed>
