<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tarashish dot com]]></title>
  <link href="http://sunu.github.com/atom.xml" rel="self"/>
  <link href="http://sunu.github.com/"/>
  <updated>2012-08-13T21:31:43+05:30</updated>
  <id>http://sunu.github.com/</id>
  <author>
    <name><![CDATA[Tarashish Mishra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Scraping with Python]]></title>
    <link href="http://sunu.github.com/blog/2012/08/10/web-scraping-with-python/"/>
    <updated>2012-08-10T14:10:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/10/web-scraping-with-python</id>
    <content type="html"><![CDATA[<p>For those who have no idea what web scraping is</p>

<blockquote><p>Web scraping (also called web harvesting or web data extraction) is a computer software technique of extracting information from websites.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Web_scraping'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>The web is full of information. Generally we are happy enough to browse these information with our favorite web-browser. There are times, however, when we need to collect information from some site and manually browsing the site is not an option. Web scraping comes in handy in those situations. You build a program which access the information you need without opening the page in a web browser.<!--more--></p>

<p>Recently I got into such a situation. Results of first semester of my university were out. But there was no list of result of all the students of my college. You have to enter the registration no. of each student to get the result. So I decided to write a script to collect the result of all the students into a single list and dump it into a file.</p>

<p>The first step was to search for a good web scraping library for python. That was pretty easy. Google and StackOverflow gave me the answer in seconds. <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> was the way to go. I loved their tag line too. It was</p>

<blockquote><p>You didn&#8217;t write that awful page. You&#8217;re just trying to get some data out of it. Beautiful Soup is here to help.</p><footer><strong>BeautifulSoup</strong> <cite><a href='http://www.crummy.com/software/BeautifulSoup/'>www.crummy.com/software/&hellip;</a></cite></footer></blockquote>


<p>Installing BeautifulSoup was a breeze. All I had to do was</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo easy_install beautifulsoup4</span></code></pre></td></tr></table></div></figure>


<p>You could also install via <code>pip</code> by</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pip install beautifulsoup4</span></code></pre></td></tr></table></div></figure>


<p>or using aptitude package manager if you are using ubuntu or any other debian based distro.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-beautifulsoup4</span></code></pre></td></tr></table></div></figure>


<p>Then using urllib2 in combination with the wonderful BeautifulSoup library I could easily extract information from web pages.</p>

<p>To use BeautifulSoup for web scraping you first have to import urllib2 and BeautifulSoup itself.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'><span class="c"># for BeautifulSoup 3 it would be:</span>
</span><span class='line'><span class="c"># from BeautifulSoup import BeautifulSoup</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you just have to make the soup :D . Pass an html document into the BeautifulSoup constructor and you are ready to all sorts of things to it, extract whatever information list. To do that</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;url_of_the_page_you_want_to_parse.html&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># then do all sorts of things with soup here.</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all. For more information on what you can do with the soup object read the <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">documentation</a> of BeautifulSoup library .There is also a great video on web scraping from PyCon US 2012. I&#8217;m embedding it here</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/52wxGESwQSA" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Text Inputs Look Awesome Using CSS3]]></title>
    <link href="http://sunu.github.com/blog/2012/08/08/making-text-inputs-look-awesome-using-css3/"/>
    <updated>2012-08-08T04:54:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/08/making-text-inputs-look-awesome-using-css3</id>
    <content type="html"><![CDATA[<p>I often use this snippet of CSS to style text inputs and even search inputs. I just love the look of it. So this blog post is just to keep it within reach.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">input</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">5px</span> <span class="k">solid</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span>
</span><span class='line'>      <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">8px</span>  <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>            <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span>
</span><span class='line'>      <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">8px</span>  <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>            <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span>
</span><span class='line'>      <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">8px</span>  <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>            <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="o">,</span><span class="m">255</span><span class="o">,</span><span class="m">255</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">10px</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Note that if you use the above snippet the styling will be applied to all the inputs. To apply these styling to texty inputs only, we can do</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">input</span><span class="nd">:not</span><span class="o">([</span><span class="nt">type</span><span class="o">=</span><span class="nt">submit</span><span class="o">])</span><span class="nd">:not</span><span class="o">([</span><span class="nt">type</span><span class="o">=</span><span class="nt">file</span><span class="o">])</span> <span class="p">{</span>
</span><span class='line'>   <span class="c">/* all the awesome css here */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code snippet is from <a href="http://css-tricks.com/styling-texty-inputs-only/">CSS-TRICKS</a>. If you need to learn cool stuff in CSS do visit that site. <a href="http://twitter.com/chriscoyier">Chris Coyier</a> is fabulous.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweeting From Python.]]></title>
    <link href="http://sunu.github.com/blog/2012/08/07/tweeting-from-python/"/>
    <updated>2012-08-07T21:12:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/07/tweeting-from-python</id>
    <content type="html"><![CDATA[<p>Many times I have the urge to check twitter while at the terminal doing stuff I love (mostly python ). But I am too lazy to open up the browser and go to twitter.com . So I decided to see how can do all the tweeting stuff from the terminal itself using python. And it turned out to be fairly simple.</p>

<p>So first I needed a twitter library in python to keep things simple. So I googled around a bit and <a href="https://github.com/tweepy/tweepy">tweepy</a> seemed to be a very good choice. So I read the docs and fired up <a href="http://www.geany.org">Geany</a> to write some scripts.</p>

<p>First thing I learned reading all the docs is that Twitter uses something called OAuth to authenticate an application before it can access any user&#8217;s account. It is safer than the older simple authentication methods. Say some application X wants to tweet for you. The X has to log into your account to do so. In older authentication system the user used to provide his password to the application while authorizing it. But now the OAuth authentication system provides the application a access token through which it can access the user&#8217;s account after authentication. So it&#8217;s more secure.</p>

<!--more-->


<p>Next I headed to <a href="http://dev.twitter.com/apps/new">http://dev.twitter.com/apps/new</a> , created a new app and generated the access tokens . After noting down the consumer key , consumer secret key , access token and access token secret and all it was time to begin coding.</p>

<p>First I installed Tweepy by</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">easy_install</span> <span class="n">tweepy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you need to authenticate your application first using OAuth which is extremely easy in tweepy. All I needed to do was</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">tweepy</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">consumer_key</span><span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="c">#your consumer key</span>
</span><span class='line'><span class="n">consumer_secret</span><span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="c">#your consumer secret</span>
</span><span class='line'><span class="n">access_token</span><span class="o">=</span>   <span class="s">&quot;&quot;</span> <span class="c">#your acces token</span>
</span><span class='line'><span class="n">access_token_secret</span><span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="c">#your access token secret</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">OAuthHandler</span><span class="p">(</span><span class="n">consumer_key</span><span class="p">,</span> <span class="n">consumer_secret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span><span class="o">.</span><span class="n">set_access_token</span><span class="p">(</span><span class="n">access_token</span><span class="p">,</span> <span class="n">access_token_secret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that I had an authorized instance of the API object of tweepy I could use almost all the functionalities of the twitter api through this and that includes tweeting  , checking timeline , trends and mentions :)</p>

<p>To make a tweet you simply do</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">api</span><span class="o">.</span><span class="n">update_status</span><span class="p">(</span><span class="s">&quot;My awesome tweet which is more awesome than yours. ;)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will do it. Check if you don&#8217;t believe me. By the way while we are here let me tell you that &#8216;awesome&#8217; is one of the most overused English words. Some guy just told me that 2 or 3 days ago. :)</p>

<p>Next you may want to check all tweets in your timeline or DM a friend or search some stuff on twitter. You can do all that stuff and more using the api that tweepy provides. For the documentation check out the <a href="https://github.com/tweepy/tweepy/">Github Repo</a> and the <a href="http://code.google.com/p/tweepy/wiki/APIReference">API Reference</a>. And you&#8217;ll doing all the tweeting stuff from your terminal in minutes. Heck you can even update your profile picture from the terminal. Cool, No ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print is Not a Function in Python 2.x]]></title>
    <link href="http://sunu.github.com/blog/2012/08/06/print-is-not-a-function-in-python-2-dot-x/"/>
    <updated>2012-08-06T15:58:00+05:30</updated>
    <id>http://sunu.github.com/blog/2012/08/06/print-is-not-a-function-in-python-2-dot-x</id>
    <content type="html"><![CDATA[<blockquote><p>Everything in Python is an Object.</p></blockquote>


<p>This is perhaps the most common line in all the python books I have read. And indeed almost everything in python are objects. And this gives great powers to python.</p>

<p>For example, let&#8217;s say we have to pass a function as argument to another function. We don&#8217;t have to pass the function&#8217;s name as a parameter or anything. Because everything including functions are objects in python, we can directly pass the function as the argument. Take a look at the following example.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">blue</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="s">&#39;blue&#39;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">sky</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="s">&#39;sky&#39;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add_strings</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">a</span><span class="p">()</span> <span class="o">+</span> <span class="n">b</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">add_strings</span><span class="p">(</span><span class="n">blue</span><span class="p">,</span><span class="n">sky</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;bluesky&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Here we passed the functions <code>blue</code> and <code>sky</code> directly into the function <code>add_strings</code> as arguments. Thing to be noted is <code>blue</code> represents the function object , but <code>blue()</code> calls the function.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">blue</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="n">blue</span> <span class="n">at</span> <span class="mh">0x8c55064</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">blue</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;blue&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now similarly function objects can also be assigned to variables.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span> <span class="s">&quot;a&quot;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if we try the same thing with <code>print</code> in python 2.x</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="k">print</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="k">print</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get a SynaxError. This is simply because <code>print</code> is not a function in python 2.x , it is a statement. The systax of <code>print</code> makes it clear too. Notice that we don&#8217;t use parentheses in the print statement which are normally used in functions. But in python 3.x <code>print</code> is made a function according to <a href="http://www.python.org/dev/peps/pep-3105/">this PEP proposal</a> and the use of parenthesis in <code>print</code> in python 3.x also support the fact that print is a function in python 3.x. So the above assignment will work in python 3.x.</p>
]]></content>
  </entry>
  
</feed>
